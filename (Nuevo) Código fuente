AP Projecte ASIXc2Codi en PHP

*** Estructura del projecte i codi a desplegar ***
app/
 ├── db.php         (connexió a la BBDD)
 ├── index.php      (llista usuaris + formulari per afegir-ne)
 ├── add.php        (afegeix usuari)
 ├── delete.php     (elimina usuari)
 └── edit.php       (edita usuari)


*** DB.PHP ***
<?php
$servername = "localhost"; // Corregido error ortográfico ("locahost" -> "localhost")
$username = "root";
$password = "root";
$dbname = "crud_db";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) { 
    die("Connexió fallida: " . $conn->connect_error); // Cerrada la llave correctamente
}
?>

*** Script de Mysql per crear la BBDD ***

CREATE DATABASE crud_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; -- Quitado condicional WHERE erróneo

USE crud_db;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL
);

*** INDEX.PHP ***
<?php include 'db.php'; ?> 
<!DOCTYPE html>
<html lang="ca">
<head>
    <meta charset="UTF-8">
    <title>CRUD mínim</title>
</head>
<body>
    <h1>Llista d’usuaris</h1>
    <table border="1"> <!-- Eliminada etiqueta <table> duplicada y colocado border correctamente -->
        <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Email</th>
            <th>Accions</th>
        </tr>
        <?php
        $result = $conn->query("SELECT * FROM users"); // Ejecuta consulta para traer usuarios
        if ($result) {
            while ($row = $result->fetch_assoc()) {
                // Escapamos con htmlspecialchars para evitar XSS
                echo "<tr>
                        <td>" . htmlspecialchars($row['id']) . "</td>
                        <td>" . htmlspecialchars($row['name']) . "</td>
                        <td>" . htmlspecialchars($row['email']) . "</td>
                        <td>
                            <a href='edit.php?id=" . urlencode($row['id']) . "'>Editar</a> | 
                            <a href='delete.php?id=" . urlencode($row['id']) . "' onclick=\"return confirm('Segur que vols eliminar aquest usuari?');\">Eliminar</a> 
                            <!-- Añadido confirmación para evitar borrados accidentales -->
                        </td>
                     </tr>";
            }
        }
        ?>
    </table>

    <h2>Afegir usuari</h2>
    <form action="add.php" method="post"> <!-- Corregido el atributo method de "posts" a "post" -->
        Nom: <input type="text" name="name" required>
        Email: <input type="email" name="email" required>
        <button type="submit">Afegir</button>
    </form>
</body>
</html>


*** ADD.PHP *** 
<?php
include 'db.php';

if (isset($_POST['name'], $_POST['email'])) { // Validamos que lleguen los datos
    $name  = $_POST['name'];
    $email = $_POST['email'];

    // Preparación de la consulta segura evitando inyección SQL
    $stmt = $conn->prepare("INSERT INTO users (name, email) VALUES (?, ?)");
    if ($stmt === false) { // Comprobamos errores en la preparación
        die("Error en la preparación de la consulta: " . $conn->error);
    }

    $stmt->bind_param("ss", $name, $email); // Indicamos los tipos y valores

    if (!$stmt->execute()) { // Comprobamos errores en la ejecución
        die("Error al ejecutar la consulta: " . $stmt->error);
    }

    $stmt->close();

    header("Location: index.php"); // Redireccionamos tras insertar
    exit;
} else {
    die("Datos incompletos."); // Si falta algún dato, informamos
}
?>

*** EDIT.PHP ***

<?php
include 'db.php';

$user = null;

if (isset($_GET['id'])) {
    $id = (int)$_GET['id'];
    $result = $conn->query("SELECT * FROM users WHERE id=$id");
    if ($result && $result->num_rows === 1) { // Verificamos que exista el usuario
        $user = $result->fetch_assoc();
    } else {
        die("Usuari no trobat."); // Si no existe, mostramos error
    }
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $id    = (int)$_POST['id'];
    $name  = $_POST['name'];
    $email = $_POST['email'];

    // Corregido el SQL UPDATE, agregando SET y evitando errores de sintaxis
    $stmt = $conn->prepare("UPDATE users SET name=?, email=? WHERE id=?");
    if ($stmt === false) { // Comprobamos errores en la preparación
        die("Error en la preparación de la consulta: " . $conn->error);
    }

    $stmt->bind_param("ssi", $name, $email, $id);

    if (!$stmt->execute()) { // Comprobamos errores en la ejecución
        die("Error en la ejecución de la consulta: " . $stmt->error);
    }

    $stmt->close();

    header("Location: index.php"); // Redirigimos tras actualizar
    exit;
}
?>

<?php if ($user): ?>
<!DOCTYPE html>
<html lang="ca">
<head>
    <meta charset="UTF-8">
    <title>Editar usuari</title>
</head>
<body>
    <h1>Editar usuari</h1>
    <form method="post">
        <!-- Escapamos salida para evitar XSS -->
        <input type="hidden" name="id" value="<?= htmlspecialchars($user['id']) ?>">
        Nom: <input type="text" name="name" value="<?= htmlspecialchars($user['name']) ?>" required>
        Email: <input type="email" name="email" value="<?= htmlspecialchars($user['email']) ?>" required>
        <button type="submit">Desar</button>
    </form>
</body>
</html>
<?php endif; ?>


*** DELETE.PHP ***

<?php
include 'db.php';

if (isset($_GET['id'])) {
    $id = (int)$_GET['id'];

    // Corregido SQL DELETE: se usa "DELETE FROM", no "DELETE * FROM"
    $stmt = $conn->prepare("DELETE FROM users WHERE id=?");
    if ($stmt === false) { // Comprobamos errores en la preparación
        die("Error en la preparación de la consulta: " . $conn->error);
    }

    $stmt->bind_param("i", $id);

    if (!$stmt->execute()) { // Comprobamos errores en la ejecución
        die("Error en la ejecución de la consulta: " . $stmt->error);
    }

    $stmt->close();

    header("Location: index.php"); // Redirigimos tras eliminar
    exit;
} else {
    die("ID no proporcionat."); // Si no hay ID, mostramos error
}
?>
